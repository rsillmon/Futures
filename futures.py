# -*- coding: utf-8 -*-
"""Futures

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pMuCFmS04MZvuUtY24ja_u3dUKVOYfsK
"""



import requests



# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# 
# st.title('Futures Dashboard')
# st.write('Hello, welcome to your first dashboard!')
#



import streamlit as st
from datetime import datetime

# Set page configuration
st.set_page_config(
    page_title="üåé Futures Intelligence Dashboard",
    layout="wide"
)

# --- Sidebar ---
with st.sidebar:
    st.title("‚öôÔ∏è Dashboard Settings")
    selected_commodity = st.selectbox(
        "Select Commodity",
        options=["Oil", "Gold", "Wheat", "Natural Gas", "Copper"]
    )
    selected_timeframe = st.selectbox(
        "Select Timeframe",
        options=["1 Day", "1 Week", "1 Month"]
    )
    st.markdown("---")
    st.write("üîπ More filters coming soon!")

# --- Main Content ---
# Header
st.title("üåç Futures Intelligence Dashboard")
st.caption(f"Last Updated: {datetime.now().strftime('%B %d, %Y %H:%M')}")

st.markdown("---")

# Today's Market Brief
st.subheader("üì¢ Today's Top Futures Insights")
st.success("""
- Oil trending upward (+1.5%) due to Middle East unrest.
- Wheat futures declining (-0.8%) as harvest reports exceed expectations.
- Gold stable despite broader market volatility.
""")

st.markdown("---")

# Quick Recommendations
st.subheader("‚úÖ Quick Recommendations")
st.info("""
- Monitor Oil futures movements today.
- Avoid shorting Wheat futures short-term.
- Watch for Federal Reserve announcements impacting commodities.
""")

st.markdown("---")

# Charts Section Placeholder
st.subheader(f"üìà {selected_commodity} Price Chart ({selected_timeframe})")
st.write("üöß [Chart loading here soon...]")

# News Headlines Section Placeholder
st.subheader("üì∞ Latest Commodity News")
news_articles = get_news_headlines(selected_commodity)

if news_articles:
    for article in news_articles:
        st.markdown(f"**[{article['title']}]({article['url']})**")
        st.caption(f"{article['source']['name']} ‚Ä¢ {article['publishedAt'][:10]}")
        st.write(article['description'])
        st.markdown("---")
else:
    st.write("No news available at the moment.")

st.caption("Powered by NewsAPI.org")


# AI News Analysis Section Placeholder
st.subheader("ü§ñ News Analysis & Insights")
from transformers import pipeline

@st.cache_resource
def load_summarizer():
    return pipeline("summarization", model="facebook/bart-large-cnn")

summarizer = load_summarizer()

# Combine article titles + descriptions into one block of text
news_text = " ".join(
    f"{article['title']}. {article['description']}" for article in news_articles if article['description']
)

# Run summarizer on combined news
if news_text:
    with st.spinner("Analyzing news..."):
        summary = summarizer(news_text, max_length=130, min_length=30, do_sample=False)[0]['summary_text']
        st.success(summary)
else:
    st.write("No news available to summarize.")


# Footer
st.markdown("---")
st.caption("Futures Intelligence Dashboard | Built for Learning and Market Awareness | ¬© 2025")

!pip install yfinance

import streamlit as st
import yfinance as yf
from datetime import datetime

# Set page configuration
st.set_page_config(
    page_title="üåé Futures Intelligence Dashboard",
    layout="wide"
)

# --- Sidebar ---
with st.sidebar:
    st.title("‚öôÔ∏è Dashboard Settings")
    selected_commodity = st.selectbox(
        "Select Commodity",
        options=["Oil", "Gold", "Wheat", "Natural Gas", "Copper"]
    )
    selected_timeframe = st.selectbox(
        "Select Timeframe",
        options=["1 Day", "1 Week", "1 Month"]
    )
    st.markdown("---")
    st.write("üîπ More filters coming soon!")

# --- Function to fetch live price ---
def get_latest_price(ticker_symbol):
    ticker = yf.Ticker(ticker_symbol)
    todays_data = ticker.history(period='1d')
    if not todays_data.empty:
        return todays_data['Close'][0]
    else:
        return None

# --- Mapping commodities to their ticker symbols ---
commodity_tickers = {
    "Oil": "CL=F",
    "Gold": "GC=F",
    "Wheat": "ZW=F",
    "Natural Gas": "NG=F",
    "Copper": "HG=F"
}

# Fetch the selected commodity's price
selected_ticker = commodity_tickers.get(selected_commodity)
latest_price = get_latest_price(selected_ticker)

# --- Main Content ---
st.title("üåç Futures Intelligence Dashboard")
st.caption(f"Last Updated: {datetime.now().strftime('%B %d, %Y %H:%M')}")

st.markdown("---")

# --- Top Futures Insights ---
st.subheader("üì¢ Today's Top Futures Insights")
if latest_price:
    st.success(f"**{selected_commodity} Latest Price:** ${latest_price:,.2f}")
else:
    st.warning("Price data not available right now.")

# (Then continue with your chart/news placeholders here...)

import plotly.graph_objects as go

# Function to fetch historical price data
def get_historical_data(ticker_symbol, timeframe='1d'):
    ticker = yf.Ticker(ticker_symbol)
    if timeframe == '1 Day':
        hist = ticker.history(period="1d", interval="5m")
    elif timeframe == '1 Week':
        hist = ticker.history(period="5d", interval="1h")
    elif timeframe == '1 Month':
        hist = ticker.history(period="1mo", interval="1d")
    else:
        hist = ticker.history(period="1d", interval="5m")
    return hist

# Fetch historical data for the selected commodity
historical_data = get_historical_data(selected_ticker, selected_timeframe)

# Plotly Chart
if not historical_data.empty:
    fig = go.Figure()
    fig.add_trace(go.Scatter(
        x=historical_data.index,
        y=historical_data['Close'],
        mode='lines',
        name=f'{selected_commodity} Price'
    ))

    fig.update_layout(
        title=f'{selected_commodity} Futures Price Over {selected_timeframe}',
        xaxis_title='Date',
        yaxis_title='Price (USD)',
        template='plotly_dark',
        height=500,
    )

    st.plotly_chart(fig, use_container_width=True)
else:
    st.warning("No historical data available to plot.")

# Function to fetch news from NewsAPI
def get_news_headlines(query):
    api_key = "c45d14608c4e4a03a9b83026b15aadc9"
    url = (
        f"https://newsapi.org/v2/everything?q={query}&language=en&sortBy=publishedAt&pageSize=5&apiKey={api_key}"
    )
    response = requests.get(url)
    if response.status_code == 200:
        articles = response.json().get("articles", [])
        return articles
    else:
        return []
